// Package exercise1 實現了一個高效能的遊戲活躍度計數服務。
//
// 本服務為音樂節奏遊戲提供實時的玩家活躍度追蹤功能，支援高併發更新和查詢，
// 可在遊戲主介面顯示「當前在線人數」和「今日活躍玩家數」等關鍵指標。
//
// 系統架構
//
// 系統採用分層架構設計，各層職責清晰：
//
//	┌─────────────────────────────────────────────────────────┐
//	│                     客戶端請求                            │
//	└────────────────────────┬────────────────────────────────┘
//	                         │
//	                         ▼
//	┌─────────────────────────────────────────────────────────┐
//	│                   HTTP Handler 層                       │
//	│   請求路由 (net/http)                                    │
//	│   參數驗證                                               │
//	│   中間件 (日誌、恢復、監控)                                 │
//	└────────────────────────┬────────────────────────────────┘
//	                         │
//	                         ▼
//	┌─────────────────────────────────────────────────────────┐
//	│                   Service 層                            │
//	│   業務邏輯實現                                            │
//	│   去重計數處理                                            │
//	│   批量寫入優化                                            │
//	│   降級策略控制                                            │
//	└────────┬───────────────────────────┬────────────────────┘
//	         │                           │
//	         ▼                           ▼
//	┌──────────────────┐       ┌──────────────────┐
//	│   Redis (主)     │       │  PostgreSQL (備)  │
//	│   高速緩存        │       │   持久化           │
//	│   原子操作        │       │   歷史歸檔         │
//	│   去重集合        │       │   降級備份         │
//	└──────────────────┘       └──────────────────┘
//
// 核心設計理念
//
// 1. 效能優先: 使用 Redis 作為主要存儲，確保 10,000 QPS 的處理能力
//
// 2. 可靠性保證: PostgreSQL 作為備份存儲，支援降級模式
//
// 3. 精確計數: 使用原子操作和分散式鎖確保併發安全
//
// 4. 去重邏輯: 利用 Redis SET 結構實現高效的用戶去重
//
// 5. 自動化: 定時任務自動重置和歸檔歷史數據
//
//	資料流程
//
// 增加計數請求流程：
//
//	Client -> HTTP Handler -> Service.Increment()
//	                              │
//	                              ├─> 檢查去重（如需要）
//	                              │     └─> Redis SADD
//	                              │
//	                              ├─> 原子增加
//	                              │     └─> Redis INCRBY
//	                              │
//	                              └─> 異步同步
//	                                    └─> PostgreSQL UPDATE
//
// 降級策略
//
// 當 Redis 連續失敗超過閾值時，系統自動切換到降級模式：
//
// 1. 所有讀寫操作直接訪問 PostgreSQL
// 2. 啟動健康檢查協程，定期檢測 Redis 狀態
// 3. Redis 恢復後自動退出降級模式
// 4. 降級期間保證基本可用性，但效能會下降
//
// 批量優化
//
// 系統使用批量寫入策略優化 PostgreSQL 同步：
//
// 1. 緩衝區大小：可配置（預設 1000）
// 2. 刷新間隔：可配置（預設 1 秒）
// 3. 自動合併：相同計數器的多次操作合併為一次更新
//
// 自動重置機制
//
// ResetScheduler 負責每日計數器的自動管理：
//
// 1. 執行時間：每日凌晨 0 點（台北時間）
// 2. 重置計數器：daily_active_users, total_games_played
// 3. 數據歸檔：保存到 counter_history 表
// 4. 歷史保留：自動清理 7 天前的記錄
//
// 監控指標
//
// 系統提供以下關鍵監控指標：
//
// 1. QPS: 每秒請求數
// 2. 延遲: P50, P95, P99 延遲
// 3. 錯誤率: 各類錯誤的發生率
// 4. 降級狀態: 是否處於降級模式
// 5. Redis 健康度: 連接狀態和錯誤計數
//
// 配置管理
//
//	  系統使用 YAML 配置文件，支援環境變數覆蓋：
//
//			server:
//			  port: 8080
//			  read_timeout: 5s
//			  write_timeout: 10s
//
//			redis:
//			  addr: localhost:6379
//			  pool_size: 100
//
//			postgres:
//			  host: localhost
//			  port: 5432
//			  max_conns: 25
//
//			counter:
//			  batch_size: 1000
//			  flush_interval: 1s
//			  fallback_threshold: 3
//
//	   部署要求
//
//				Go 1.24+
//				Redis 7.0+
//				PostgreSQL 14+
//				Docker & Docker Compose（可選）
package main
