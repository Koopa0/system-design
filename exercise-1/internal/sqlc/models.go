// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CounterType string

const (
	CounterTypeNormal     CounterType = "normal"
	CounterTypeUnique     CounterType = "unique"
	CounterTypeCumulative CounterType = "cumulative"
)

func (e *CounterType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CounterType(s)
	case string:
		*e = CounterType(s)
	default:
		return fmt.Errorf("unsupported scan type for CounterType: %T", src)
	}
	return nil
}

type NullCounterType struct {
	CounterType CounterType `json:"counter_type"`
	Valid       bool        `json:"valid"` // Valid is true if CounterType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCounterType) Scan(value interface{}) error {
	if value == nil {
		ns.CounterType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CounterType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCounterType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CounterType), nil
}

type Counter struct {
	ID           int32            `json:"id"`
	Name         string           `json:"name"`
	CurrentValue pgtype.Int8      `json:"current_value"`
	CounterType  NullCounterType  `json:"counter_type"`
	Metadata     []byte           `json:"metadata"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type CounterHistory struct {
	ID          int32            `json:"id"`
	CounterName string           `json:"counter_name"`
	Date        pgtype.Date      `json:"date"`
	FinalValue  int64            `json:"final_value"`
	UniqueUsers []byte           `json:"unique_users"`
	Metadata    []byte           `json:"metadata"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type WriteQueue struct {
	ID          int32            `json:"id"`
	CounterName string           `json:"counter_name"`
	Operation   string           `json:"operation"`
	Value       int64            `json:"value"`
	UserID      pgtype.Text      `json:"user_id"`
	Metadata    []byte           `json:"metadata"`
	Processed   pgtype.Bool      `json:"processed"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}
