// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// 歸檔計數器歷史記錄
	ArchiveCounterHistory(ctx context.Context, arg ArchiveCounterHistoryParams) (CounterHistory, error)
	// 清理已處理的舊佇列項目
	CleanOldQueue(ctx context.Context) error
	// 創建新的計數器
	CreateCounter(ctx context.Context, arg CreateCounterParams) (Counter, error)
	// 原子性減少計數器值
	DecrementCounter(ctx context.Context, arg DecrementCounterParams) (pgtype.Int8, error)
	// 刪除超過 7 天的歷史記錄
	DeleteOldHistory(ctx context.Context) error
	// 獲取未處理的寫入操作
	DequeueWrites(ctx context.Context, limit int32) ([]WriteQueue, error)
	// 將寫入操作加入佇列（降級模式使用）
	EnqueueWrite(ctx context.Context, arg EnqueueWriteParams) (WriteQueue, error)
	// 獲取單個計數器的當前值
	GetCounter(ctx context.Context, name string) (Counter, error)
	// 查詢計數器歷史
	GetCounterHistory(ctx context.Context, arg GetCounterHistoryParams) ([]CounterHistory, error)
	// 批量獲取多個計數器
	GetCounters(ctx context.Context, dollar_1 []string) ([]Counter, error)
	// 原子性增加計數器值
	IncrementCounter(ctx context.Context, arg IncrementCounterParams) (pgtype.Int8, error)
	// 列出所有計數器
	ListCounters(ctx context.Context, arg ListCountersParams) ([]Counter, error)
	// 標記寫入操作為已處理
	MarkWriteProcessed(ctx context.Context, id int32) error
	// 重置計數器為 0
	ResetCounter(ctx context.Context, name string) error
	// 直接設置計數器值（用於從 Redis 同步）
	SetCounter(ctx context.Context, arg SetCounterParams) error
}

var _ Querier = (*Queries)(nil)
